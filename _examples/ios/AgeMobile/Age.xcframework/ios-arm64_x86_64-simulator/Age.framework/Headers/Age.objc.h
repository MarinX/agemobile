// Objective-C API for talking to filippo.io/age Go package.
//   gobind -lang=objc filippo.io/age
//
// File is generated by gobind. Do not edit.

#ifndef __Age_H__
#define __Age_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class AgeNoIdentityMatchError;
@class AgeScryptIdentity;
@class AgeScryptRecipient;
@class AgeStanza;
@class AgeX25519Identity;
@class AgeX25519Recipient;
@protocol AgeIdentity;
@class AgeIdentity;
@protocol AgeRecipient;
@class AgeRecipient;

@protocol AgeIdentity <NSObject>
// skipped method Identity.Unwrap with unsupported parameter or return types

@end

@protocol AgeRecipient <NSObject>
// skipped method Recipient.Wrap with unsupported parameter or return types

@end

/**
 * NoIdentityMatchError is returned by Decrypt when none of the supplied
identities match the encrypted file.
 */
@interface AgeNoIdentityMatchError : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field NoIdentityMatchError.Errors with unsupported type: []error

- (NSString* _Nonnull)error;
@end

/**
 * ScryptIdentity is a password-based identity.
 */
@interface AgeScryptIdentity : NSObject <goSeqRefInterface, AgeIdentity> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewScryptIdentity returns a new ScryptIdentity with the provided password.
 */
- (nullable instancetype)init:(NSString* _Nullable)password;
/**
 * SetMaxWorkFactor sets the maximum accepted scrypt work factor to 2^logN.
It must be called before Unwrap.

This caps the amount of work that Decrypt might have to do to process
received files. If SetMaxWorkFactor is not called, a fairly high default is
used, which might not be suitable for systems processing untrusted files.
 */
- (void)setMaxWorkFactor:(long)logN;
// skipped method ScryptIdentity.Unwrap with unsupported parameter or return types

@end

/**
 * ScryptRecipient is a password-based recipient. Anyone with the password can
decrypt the message.

If a ScryptRecipient is used, it must be the only recipient for the file: it
can't be mixed with other recipient types and can't be used multiple times
for the same file.

Its use is not recommended for automated systems, which should prefer
X25519Recipient.
 */
@interface AgeScryptRecipient : NSObject <goSeqRefInterface, AgeRecipient> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewScryptRecipient returns a new ScryptRecipient with the provided password.
 */
- (nullable instancetype)init:(NSString* _Nullable)password;
/**
 * SetWorkFactor sets the scrypt work factor to 2^logN.
It must be called before Wrap.

If SetWorkFactor is not called, a reasonable default is used.
 */
- (void)setWorkFactor:(long)logN;
// skipped method ScryptRecipient.Wrap with unsupported parameter or return types

@end

/**
 * A Stanza is a section of the age header that encapsulates the file key as
encrypted to a specific recipient.

Most age API users won't need to interact with this directly, and should
instead pass Recipient implementations to Encrypt and Identity
implementations to Decrypt.
 */
@interface AgeStanza : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull type;
// skipped field Stanza.Args with unsupported type: []string

@property (nonatomic) NSData* _Nullable body;
@end

/**
 * X25519Identity is the standard age private key, which can decrypt messages
encrypted to the corresponding X25519Recipient.
 */
@interface AgeX25519Identity : NSObject <goSeqRefInterface, AgeIdentity> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Recipient returns the public X25519Recipient value corresponding to i.
 */
- (AgeX25519Recipient* _Nullable)recipient;
/**
 * String returns the Bech32 private key encoding of i.
 */
- (NSString* _Nonnull)string;
// skipped method X25519Identity.Unwrap with unsupported parameter or return types

@end

/**
 * X25519Recipient is the standard age public key. Messages encrypted to this
recipient can be decrypted with the corresponding X25519Identity.

This recipient is anonymous, in the sense that an attacker can't tell from
the message alone if it is encrypted to a certain recipient.
 */
@interface AgeX25519Recipient : NSObject <goSeqRefInterface, AgeRecipient> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * String returns the Bech32 public key encoding of r.
 */
- (NSString* _Nonnull)string;
// skipped method X25519Recipient.Wrap with unsupported parameter or return types

@end

@interface Age : NSObject
+ (NSError* _Nullable) errIncorrectIdentity;
+ (void) setErrIncorrectIdentity:(NSError* _Nullable)v;

@end

// skipped function Decrypt with unsupported parameter or return types


// skipped function Encrypt with unsupported parameter or return types


/**
 * GenerateX25519Identity randomly generates a new X25519Identity.
 */
FOUNDATION_EXPORT AgeX25519Identity* _Nullable AgeGenerateX25519Identity(NSError* _Nullable* _Nullable error);

/**
 * NewScryptIdentity returns a new ScryptIdentity with the provided password.
 */
FOUNDATION_EXPORT AgeScryptIdentity* _Nullable AgeNewScryptIdentity(NSString* _Nullable password, NSError* _Nullable* _Nullable error);

/**
 * NewScryptRecipient returns a new ScryptRecipient with the provided password.
 */
FOUNDATION_EXPORT AgeScryptRecipient* _Nullable AgeNewScryptRecipient(NSString* _Nullable password, NSError* _Nullable* _Nullable error);

// skipped function ParseIdentities with unsupported parameter or return types


// skipped function ParseRecipients with unsupported parameter or return types


/**
 * ParseX25519Identity returns a new X25519Identity from a Bech32 private key
encoding with the "AGE-SECRET-KEY-1" prefix.
 */
FOUNDATION_EXPORT AgeX25519Identity* _Nullable AgeParseX25519Identity(NSString* _Nullable s, NSError* _Nullable* _Nullable error);

/**
 * ParseX25519Recipient returns a new X25519Recipient from a Bech32 public key
encoding with the "age1" prefix.
 */
FOUNDATION_EXPORT AgeX25519Recipient* _Nullable AgeParseX25519Recipient(NSString* _Nullable s, NSError* _Nullable* _Nullable error);

@class AgeIdentity;

@class AgeRecipient;

/**
 * An Identity is passed to Decrypt to unwrap an opaque file key from a
recipient stanza. It can be for example a secret key like X25519Identity, a
plugin, or a custom implementation.

Unwrap must return an error wrapping ErrIncorrectIdentity if none of the
recipient stanzas match the identity, any other error will be considered
fatal.

Most age API users won't need to interact with this directly, and should
instead pass Recipient implementations to Encrypt and Identity
implementations to Decrypt.
 */
@interface AgeIdentity : NSObject <goSeqRefInterface, AgeIdentity> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
// skipped method Identity.Unwrap with unsupported parameter or return types

@end

/**
 * A Recipient is passed to Encrypt to wrap an opaque file key to one or more
recipient stanza(s). It can be for example a public key like X25519Recipient,
a plugin, or a custom implementation.

Most age API users won't need to interact with this directly, and should
instead pass Recipient implementations to Encrypt and Identity
implementations to Decrypt.
 */
@interface AgeRecipient : NSObject <goSeqRefInterface, AgeRecipient> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
// skipped method Recipient.Wrap with unsupported parameter or return types

@end

#endif
